#!/bin/bash

# MIT License - https://github.com/sakibulalikhan/joty/blob/main/LICENSE
# Copyright (c) 2023 Sakibul Ali Khan

# Function to display a warning message for non-Arch based distros
show_warning() {
    echo -e "\e[31m[X]\e[0m This script is designed to run on Arch-based distributions."
    echo "Use Arch Linux or Arch-based distro to conquer the world with the power of black art!"
    exit 1
}

# Detect OS and show warning for non-Arch-based distros
if [ -f "/etc/arch-release" ] || grep -qi "arch" /proc/version; then
    # Arch Linux or Arch-based distribution or running in WSL with Arch
    :
else
    show_warning
fi

# Print script header
cat << "EOF"

 ▄▄▄██▀▀▀ ▒█████  ▄▄▄█████▓▓██   ██▓
   ▒██   ▒██▒  ██▒▓  ██▒ ▓▒ ▒██  ██▒
   ░██   ▒██░  ██▒▒ ▓██░ ▒░  ▒██ ██░
▓██▄██▓  ▒██   ██░░ ▓██▓ ░   ░ ▐██▓░
 ▓███▒   ░ ████▓▒░  ▒██▒ ░   ░ ██▒▓░
 ▒▓▒▒░   ░ ▒░▒░▒░   ▒ ░░      ██▒▒▒
 ▒ ░▒░     ░ ▒ ▒░     ░     ▓██ ░▒░

        @sakibulalikhan -- The Magic Wapons for Arch!!!
EOF

# Function to check if a package is installed
is_installed() {
    pacman -Qi "$1" &> /dev/null
}

# Function to install a package using yay or pacman
install_package() {
    if is_installed "$1"; then
        echo -e "\e[32m[✔]\e[0m $1 is already installed."
    else
        # Use yay directly, it will handle sudo if required
        if yay -S --noconfirm "$1" &> /dev/null; then
            echo -e "\e[32m[✔]\e[0m $1 has been installed."
        else
            echo -e "\e[31m[X]\e[0m Failed to install $1."
        fi
    fi
}

# Function to add BlackArch repository if not added already
add_blackarch_repo() {
    if grep -q "\[blackarch\]" /etc/pacman.conf; then
        echo -e "\e[32m[✔]\e[0m BlackArch repository is already added."
    else
        echo
        echo "The BlackArch repository is not added to your system."
        echo
        read -p "Do you want to add the BlackArch repository? (y/N): " answer
        if [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
            echo -e "\e[1mAdding BlackArch Repository\e[0m"
            curl -O https://blackarch.org/strap.sh
            chmod +x strap.sh
            sudo ./strap.sh
            echo -e "\e[32m[✔]\e[0m BlackArch repository added successfully."
        else
            echo
            echo "You chose not to add the BlackArch repository. Some tools may not be installable."
        fi
    fi
}

# Function to display category headers
display_category() {
    echo -e "\n\e[1m$1\e[0m"
}

# Function to display script usage
display_help() {
    echo -e "\n\e[1mUsage:\e[0m"
    echo "  -h, --help        Display this help message."
    echo "  -a, --all         Install all tools."
    echo "  -n, --networks    Install network tools."
    echo "  -e, --exploits    Install exploitation tools."
    echo "  -f, --forensics   Install forensics tools."
    echo "  -w, --web         Install web application tools."
    echo "  -u, --utilities   Install utility tools."
    echo "  -o, --osint       Install OSINT tools."
    echo "  -c, --cloud       Install cloud tools."
    echo "  -r, --recon       Install recon tools."
    exit 1
}

# Function to re-prompt for sudo password if necessary
prompt_sudo() {
    sudo -nv >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "Please enter your password for sudo:"
        sudo -v >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "Incorrect password. Exiting..."
            exit 1
        fi
    fi
}

# Declare arrays for tool categories
network_tools=(
    "nmap" "naabu" "assetfinder" "subjack" "amass" "waybackurls" "jq" "gowitness" "httprobe" "wafw00f" "whatweb" "nikto" "tcpdump" "wireshark" "quickscope" "ghidra" "sqlmap" "rustscan" "ghauri" "nosqlmap" "gobuster" "ffuf" "dirb" "seclists" "hydra" "metasploit-framework" "wpscan" "hashcat" "john" "binwalk" "foremost" "yara" "gdb" "autopsy" "wfuzz" "wapiti" "maltego" "nuclei" "recon-ng" "ncat" "wget" "curl" "openssh" "hashid" "wordlists" "bind" "smbmap" "smbclient" "bloodhound" "net-tools" "whois" "impacket" "crackmapexec" "winrm" "evil-winrm" "mimikatz"
)

exploitation_tools=(
    "hydra" "metasploit-framework" "sqlmap" "wpscan" "joomscan" "deepce" "hashcat" "john" "bind" "smbmap" "smbclient" "bloodhound" "net-tools" "whois" "impacket" "crackmapexec" "winrm" "evil-winrm" "mimikatz" "sploitctl"
)

forensics_tools=(
    "binwalk" "foremost" "yara" "gdb" "autopsy" "volatility"
)

web_tools=(
    "wfuzz" "wapiti" "maltego" "nuclei" "recon-ng" "joomscan" "wpscan" "drupalscan" "drupwn" "cmseek" "cmsmap" "arjun" "sqlmap" "nosqlmap" "ffuf" "gobuster" "subfinder" "dalfox" "xsstrike" "vulmap"
)

utility_tools=(
    "ncat" "socat" "wget" "curl" "openssh" "hashid"
)

osint_tools=(
    "theharvester" "sherlock" "spiderfoot" "recon-ng" "set"
)

cloud_tools=(
    "awscli" "azure-cli" "gcloud" "openstack-cli" "terraform" "kubectl" "helm" "ansible" "packer" "s3scanner"
)

recon_tools=(
    "joomscan" "drupalscan" "drupwn" "sqlmap" "nosqlmap" "ffuf" "gobuster" "subfinder"
)

# Parse command line options

if [[ "$#" -eq 0 ]]; then
    display_help
fi

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help) display_help ;;
        -a|--all) install_all=true; ;;
        -n|--networks) install_networks=true; ;;
        -e|--exploits) install_exploits=true; ;;
        -f|--forensics) install_forensics=true; ;;
        -w|--web) install_web=true; ;;
        -u|--utilities) install_utilities=true; ;;
        -o|--osint) install_osint=true; ;;
        -c|--cloud) install_cloud=true; ;;
        -r|--recon) install_recon=true; ;;
        *) echo "Unknown parameter: $1"; exit 1 ;;
    esac
    shift
done

echo -e "\e[1mInstalling Tools\e[0m"

# Add BlackArch repository if not added already
add_blackarch_repo

# Prompt for sudo password
prompt_sudo

# Install tools based on selected categories
if [[ $install_all ]]; then
    display_category "Installing All Tools"
    for category in network_tools exploitation_tools forensics_tools web_tools utility_tools osint_tools cloud_tools recon_tools; do
        for tool in "${!category}"; do
            install_package "$tool"
        done
    done
elif [[ $install_networks ]]; then
    display_category "Installing Network Tools"
    for tool in "${network_tools[@]}"; do
        install_package "$tool"
    done
elif [[ $install_exploits ]]; then
    display_category "Installing Exploitation Tools"
    for tool in "${exploitation_tools[@]}"; do
        install_package "$tool"
    done
elif [[ $install_forensics ]]; then
    display_category "Installing Forensics Tools"
    for tool in "${forensics_tools[@]}"; do
        install_package "$tool"
    done
elif [[ $install_web ]]; then
    display_category "Installing Web Application Tools"
    for tool in "${web_tools[@]}"; do
        install_package "$tool"
    done
elif [[ $install_utilities ]]; then
    display_category "Installing Utility Tools"
    for tool in "${utility_tools[@]}"; do
        install_package "$tool"
    done
elif [[ $install_osint ]]; then
    display_category "Installing OSINT Tools"
    for tool in "${osint_tools[@]}"; do
        install_package "$tool"
    done
elif [[ $install_cloud ]]; then
    display_category "Installing Cloud Tools"
    for tool in "${cloud_tools[@]}"; do
        install_package "$tool"
    done
elif [[ $install_recon ]]; then
    display_category "Installing Recon Tools"
    for tool in "${recon_tools[@]}"; do
        install_package "$tool"
    done
else
    echo "No category selected. Please use -h or --help for usage information."
    exit 1
fi

echo -e "\n\e[1mSelected tools have been installed successfully.\e[0m"
